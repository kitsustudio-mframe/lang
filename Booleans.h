/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */
#ifndef LANG_90D9B92C_CB56_4072_B34E_C233A3D5684D
#define LANG_90D9B92C_CB56_4072_B34E_C233A3D5684D

/* ****************************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------------------
#include "./Object.h"
#include "./Iterator.h"
//-----------------------------------------------------------------------------------------

/* ****************************************************************************************
 * Namespace
 */
namespace lang {
  class Booleans;
}

/* ****************************************************************************************
 * Class/Interface/Struct/Enum
 */
class lang::Booleans : public lang::Object {
  /* **************************************************************************************
   * Variable <Public>
   */
 public:
  static const char* TEXT_TRUE;
  static const char* TEXT_FALSE;

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */

  /* **************************************************************************************
   * Abstract method <Public>
   */

  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */
 private:
  Booleans(void) = default;

  virtual ~Booleans(void) override = default;

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */
  public:
    static bool isBoolean(const char* str);

    static bool isBoolean(lang::Iterator<char>& iterator);

    static bool parseBoolean(bool& result, const char* str);
    
    static bool parseBoolean(bool& result, lang::Iterator<char>& iterable);

  /* **************************************************************************************
   * Public Method <Override>
   */

  /* **************************************************************************************
   * Public Method
   */

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */

  /* **************************************************************************************
   * Private Method
   */
};

/* ****************************************************************************************
 * End of file
 */

#endif /* LANG_90D9B92C_CB56_4072_B34E_C233A3D5684D */
