/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/* ******************************************************************************
 * Include
 */

#include "./EntryPoint.h"
//-------------------------------------------------------------------------------

#include "mframe.h"
//-------------------------------------------------------------------------------

/* ******************************************************************************
 * Macro
 */

/* ******************************************************************************
 * Using
 */
using mframe::lang::managerment::EntryPoint;

//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------

/* ******************************************************************************
 * Variable <Static>
 */

/* ******************************************************************************
 * Construct Method
 */

//-------------------------------------------------------------------------------
EntryPoint::EntryPoint(void (*setup)(mframe::lang::Thread*), void (*loop)(mframe::lang::Thread*)) {
  this->mLoop = loop;
  this->mSetup = setup;
  return;
}

//-------------------------------------------------------------------------------
EntryPoint::~EntryPoint(void) {
  return;
}

/* ******************************************************************************
 * Operator Method
 */

/* ******************************************************************************
 * Public Method <Static>
 */

/* ******************************************************************************
 * Public Method <Override> - mframe::lang::Runnable
 */

//-------------------------------------------------------------------------------
void EntryPoint::run(void) {
  Thread* thread = this->currentThread();
  this->mSetup(thread);

  while (true) {
    this->mLoop(thread);
  }
}

/* ******************************************************************************
 * Public Method
 */

/* ******************************************************************************
 * Protected Method <Static>
 */

/* ******************************************************************************
 * Protected Method <Override>
 */

/* ******************************************************************************
 * Protected Method
 */

/* ******************************************************************************
 * Private Method
 */

/* ******************************************************************************
 * End of file
 */
