/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/* ******************************************************************************
 * Include
 */

//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
#include "lang/OutputStreamBuffer.h"

/* ******************************************************************************
 * Macro
 */

/* ******************************************************************************
 * Using
 */

//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
using lang::OutputStreamBuffer;

/* ******************************************************************************
 * Variable <Static>
 */

/* ******************************************************************************
 * Construct Method
 */

//-------------------------------------------------------------------------------
OutputStreamBuffer::OutputStreamBuffer(void){
  this->mResult = 0;
  return;
}

//-------------------------------------------------------------------------------
OutputStreamBuffer::~OutputStreamBuffer(void){
  return;
}

/* ******************************************************************************
 * Operator Method
 */

/* ******************************************************************************
 * Public Method <Static>
 */

/* ******************************************************************************
 * Public Method <Override> - lang::ReadBuffer
 */

//-------------------------------------------------------------------------------
bool OutputStreamBuffer::isEmpty(void) const {
  return this->mReadBuffer->isEmpty();
}

//-------------------------------------------------------------------------------
int OutputStreamBuffer::avariable(void) const {
  return this->mReadBuffer->avariable();
}

//-------------------------------------------------------------------------------
bool OutputStreamBuffer::getByte(char& result) {
  bool status = this->mReadBuffer->getByte(result);

  if (this->mReadBuffer->isEmpty()) {
  }

  return status;
}

//-------------------------------------------------------------------------------
int OutputStreamBuffer::get(lang::WriteBuffer& writeBuffer) {
  return 0;
}

//-------------------------------------------------------------------------------
int OutputStreamBuffer::get(lang::WriteBuffer& writeBuffer, int length) {
  return 0;
}

//-------------------------------------------------------------------------------
int OutputStreamBuffer::get(void* buffer, int bufferSize) {
  return 0;
}

//-------------------------------------------------------------------------------
int OutputStreamBuffer::skip(int value) {
  return 0;
}
/* ******************************************************************************
 * Public Method
 */

/* ******************************************************************************
 * Protected Method <Static>
 */

/* ******************************************************************************
 * Protected Method <Override>
 */

/* ******************************************************************************
 * Protected Method
 */

/* ******************************************************************************
 * Private Method
 */

/* ******************************************************************************
 * End of file
 */
