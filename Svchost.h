/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */
#ifndef LANG_90F75476_6982_4BDD_B9ED_0A250FE9C324
#define LANG_90F75476_6982_4BDD_B9ED_0A250FE9C324

/* ****************************************************************************************
 * Include
 */  

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
#include "Object.h"
#include "Runnable.h"
#include "Thread.h"

/* ****************************************************************************************
 * Namespace
 */  
namespace lang{
  class Svchost;
}


/* ****************************************************************************************
 * Class/Interface/Struct/Enum
 */  
class lang::Svchost extends lang::Object implements lang::Runnable{

  /* **************************************************************************************
   * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */
  private:
    lang::Thread& mThread;
  
  /* **************************************************************************************
   * Abstract method <Public>
   */

  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */
  public: 
    /**
     *
     */
    Svchost(lang::Thread& thread);
    
    /**
     *
     */
    virtual ~Svchost(void);

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override> lang::Runnable
   */
  public:
    /**
     *
     */
    virtual void run(void); 

  /* **************************************************************************************
   * Public Method
   */
  public:
    void stop(void);
  
    bool execute(lang::Runnable);

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */

  /* **************************************************************************************
   * Private Method
   */

};

/* ****************************************************************************************
 * End of file
 */ 

#endif /* LANG_90F75476_6982_4BDD_B9ED_0A250FE9C324 */
