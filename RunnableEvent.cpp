/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/* ******************************************************************************
 * Include
 */
#include "./RunnableEvent.h"

//-------------------------------------------------------------------------------
#include "mframe.h"

/* ******************************************************************************
 * Macro
 */

/* ******************************************************************************
 * Using
 */
using mframe::lang::RunnableEvent;

//-------------------------------------------------------------------------------

/* ******************************************************************************
 * Variable <Static>
 */

/* ******************************************************************************
 * Construct Method
 */

//-------------------------------------------------------------------------------
RunnableEvent::RunnableEvent(void) {
  RunnableEvent::mFunction = nullptr;
}

//-------------------------------------------------------------------------------
RunnableEvent::RunnableEvent(void (*function)(void)) {
  RunnableEvent::mFunction = function;
  return;
}

//-------------------------------------------------------------------------------
RunnableEvent::~RunnableEvent(void) {
  return;
}

/* ******************************************************************************
 * Operator Method
 */

/* ******************************************************************************
 * Public Method <Static>
 */

/* ******************************************************************************
 * Public Method <Override>
 */

//-------------------------------------------------------------------------------
void RunnableEvent::run(void) {
  if (RunnableEvent::mFunction != nullptr)
    RunnableEvent::mFunction();
}

/* ******************************************************************************
 * Public Method
 */

/* ******************************************************************************
 * Protected Method <Static>
 */

/* ******************************************************************************
 * Protected Method <Override>
 */

/* ******************************************************************************
 * Protected Method
 */

/* ******************************************************************************
 * Private Method
 */

/* ******************************************************************************
 * End of file
 */
