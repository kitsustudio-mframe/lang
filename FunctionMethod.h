/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */
#ifndef LANG_744A7D50_87F7_4559_993A_9FA307345979
#define LANG_744A7D50_87F7_4559_993A_9FA307345979

/* ****************************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------------------
#include "./Function.h"
#include "./Object.h"
//-----------------------------------------------------------------------------------------

/* ****************************************************************************************
 * Namespace
 */
namespace lang {
  template <class T, class U, class E>
  class FunctionMethod;
}

/* ****************************************************************************************
 * Class/Interface/Struct/Enum
 */

/**
 * @brief 
 * 
 * @tparam T 輸入類型
 * @tparam R 返回類型
 * @tparam C 類別類型
 */
template <class C, class T, class R>
class lang::FunctionMethod : public lang::Object, public lang::Function<T, R> {
  /* **************************************************************************************
   * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */
  private:
    C& mClass;
    R (C::*mMethod)(T);

  /* **************************************************************************************
   * Abstract method <Public>
   */

  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */
 public:
  FunctionMethod(C& c, R (C::*method)(T)) : mClass(c){
    this->mMethod = method;
    return;
  }

  virtual ~FunctionMethod(void) override{
    return;
  }

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override>
   */
 public:
  /**
   * @brief
   *
   * @param t
   * @return R
   */
  virtual R apply(T t) override{
    return (this->mClass.*this->mMethod)(t);
  }

  /* **************************************************************************************
   * Public Method
   */

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */

  /* **************************************************************************************
   * Private Method
   */
};

/* ****************************************************************************************
 * End of file
 */

#endif /* LANG_744A7D50_87F7_4559_993A_9FA307345979 */
