/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/* ******************************************************************************
 * Include
 */

//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
#include "./HashGen.h"

/* ******************************************************************************
 * Macro
 */

/* ******************************************************************************
 * Using
 */

//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
using lang::HashGen;

/* ******************************************************************************
 * Variable <Static>
 */

/* ******************************************************************************
 * Construct Method
 */

//-------------------------------------------------------------------------------
HashGen::HashGen(void) {
  return;
}

//-------------------------------------------------------------------------------
HashGen::~HashGen(void) {
  return;
}

/* ******************************************************************************
 * Operator Method
 */

/* ******************************************************************************
 * Public Method <Static>
 */

//-------------------------------------------------------------------------------
int HashGen::getHashcode(const void* src, int len) {
  int result = 0;
  for (int i = 0; i < len; ++i)
    result = 31 * result + reinterpret_cast<const unsigned char*>(src)[i];

  return result;
}

//-------------------------------------------------------------------------------
int HashGen::getHashcode(const char* src) {
  int result = 0;
  for (int i = 0; src[i] != 0; ++i)
    result = 31 * result + reinterpret_cast<const unsigned char*>(src)[i];

  return result;
}

/* ******************************************************************************
 * Public Method <Override>
 */

/* ******************************************************************************
 * Public Method
 */

/* ******************************************************************************
 * Protected Method <Static>
 */

/* ******************************************************************************
 * Protected Method <Override>
 */

/* ******************************************************************************
 * Protected Method
 */

/* ******************************************************************************
 * Private Method
 */

/* ******************************************************************************
 * End of file
 */
