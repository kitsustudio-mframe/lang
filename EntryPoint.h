/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */
#ifndef LANG_E8463782_967B_46FF_930C_98A3EB2CAF31
#define LANG_E8463782_967B_46FF_930C_98A3EB2CAF31

/* ******************************************************************************
 * Include
 */  

//-------------------------------------------------------------------------------
#include "./Object.h"
#include "./Thread.h"

//-------------------------------------------------------------------------------

/* ******************************************************************************
 * Namespace
 */  
namespace lang{
  class EntryPoint;
}


/* ******************************************************************************
 * Class/Interface/Struct/Enum
 */  
class lang::EntryPoint :public lang::Object, 
public lang::Runnable{

  /* ****************************************************************************
   * Variable <Public>
   */

  /* ****************************************************************************
   * Variable <Protected>
   */

  /* ****************************************************************************
   * Variable <Private>
   */
  private:
    void (*mSetup)(lang::Thread*);
    void (*mLoop)(lang::Thread*);
  
  /* ****************************************************************************
   * Abstract method <Public>
   */

  /* ****************************************************************************
   * Abstract method <Protected>
   */

  /* ****************************************************************************
   * Construct Method
   */
  public: 
    /**
     *
     */
    EntryPoint(void (*setup)(lang::Thread*), void (*loop)(lang::Thread*));
    
    /**
     *
     */
    virtual ~EntryPoint(void) override;

  /* ****************************************************************************
   * Operator Method
   */

  /* ****************************************************************************
   * Public Method <Static>
   */

  /* ****************************************************************************
   * Public Method <Override>- lang::Runnable
   */
  public:
    /**
     *
     */
    virtual void run(void) override;

  /* ****************************************************************************
   * Public Method
   */

  /* ****************************************************************************
   * Protected Method <Static>
   */

  /* ****************************************************************************
   * Protected Method <Override>
   */

  /* ****************************************************************************
   * Protected Method
   */

  /* ****************************************************************************
   * Private Method <Static>
   */

  /* ****************************************************************************
   * Private Method <Override>
   */

  /* ****************************************************************************
   * Private Method
   */

};

/* ******************************************************************************
 * End of file
 */ 

#endif /* LANG_E8463782_967B_46FF_930C_98A3EB2CAF31 */
