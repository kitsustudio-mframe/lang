/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */

/* ******************************************************************************
 * Include
 */
#include "./Thread.h"
//-------------------------------------------------------------------------------

#include "mframe.h"

/* ******************************************************************************
 * Macro
 */

/* ******************************************************************************
 * Using
 */
using mframe::lang::Thread;

//-------------------------------------------------------------------------------

/* ******************************************************************************
 * Variable <Static>
 */

/* ******************************************************************************
 * Construct Method
 */

//-------------------------------------------------------------------------------
Thread::Thread(void) {
  return;
}

//-------------------------------------------------------------------------------
Thread::~Thread(void) {
  return;
}

/* ******************************************************************************
 * Operator Method
 */

/* ******************************************************************************
 * Public Method <Static>
 */

/* ******************************************************************************
 * Public Method <Override>
 */

/* ******************************************************************************
 * Public Method
 */

//-------------------------------------------------------------------------------
bool Thread::start(const char* name) {
  return this->start(name, mframe::lang::ThreadPriority::NORMAL);
}

//-------------------------------------------------------------------------------
bool Thread::isActive(void) {
  mframe::lang::ThreadState state = this->getState();

  switch (state) {
    case mframe::lang::ThreadState::INACTIVE:
    case mframe::lang::ThreadState::ERROR:
      return false;

    case mframe::lang::ThreadState::BLOCKED:
    case mframe::lang::ThreadState::READY:
    case mframe::lang::ThreadState::RUNNING:
    case mframe::lang::ThreadState::TERMINATED:
      return true;
  }
}

/* ******************************************************************************
 * Protected Method <Static>
 */

/* ******************************************************************************
 * Protected Method <Override>
 */

/* ******************************************************************************
 * Protected Method
 */

/* ******************************************************************************
 * Private Method
 */

/* ******************************************************************************
 * End of file
 */
