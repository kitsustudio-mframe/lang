/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 * 
 * SPDX-License-Identifier: MIT
 */

/* ****************************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
#include "./Thread.h"

/* ****************************************************************************************
 * Macro
 */

/* ****************************************************************************************
 * Using
 */

//-----------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------
using lang::Thread;

/* ****************************************************************************************
 * Variable <Static>
 */

/* ****************************************************************************************
 * Construct Method
 */
/**
 *
 */
Thread::Thread(void){
  return;
}
    
/**
 *
 */
Thread::~Thread(void){
  return;
}
/* ****************************************************************************************
 * Operator Method
 */

/* ****************************************************************************************
 * Public Method <Static>
 */

/* ****************************************************************************************
 * Public Method <Override>
 */

/* ****************************************************************************************
 * Public Method
 */

/**
 * @brief 
 * 
 * @return true 
 * @return false 
 */
bool Thread::start(const char* name){
  return this->start(name, lang::ThreadPriority::NORMAL);
}

/**
 * @brief 
 * 
 * @return true 
 * @return false 
 */
bool Thread::isActive(void){
  lang::ThreadState state = this->getState();
  
  switch(state){
    case lang::ThreadState::INACTIVE:
    case lang::ThreadState::ERROR:
      return false;
    
    case lang::ThreadState::BLOCKED:
    case lang::ThreadState::READY:
    case lang::ThreadState::RUNNING:
    case lang::ThreadState::TERMINATED:
      return true;
      
  }
}
/* ****************************************************************************************
 * Protected Method <Static>
 */

/* ****************************************************************************************
 * Protected Method <Override>
 */

/* ****************************************************************************************
 * Protected Method
 */

/* ****************************************************************************************
 * Private Method
 */

/* ****************************************************************************************
 * End of file
 */
